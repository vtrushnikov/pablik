{1,
{10,
{"tvs",1,0,"",""},
{11,
{"Управляемые формы",1,0,"",""},
{6,
{"Элементы",1,0,"",""},
{0,
{"Добавить поле ввода",0,0,"","ГруппаРодитель = Элементы.Найти(""<?""Группа родитель"">"");
НовыйЭлемент = Элементы.Добавить(""<?""Имя реквизита"">"", Тип(""ПолеФормы""), ГруппаРодитель);
НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
НовыйЭлемент.ПутьКДанным = ""Объект.<?""Имя реквизита"">"";
//НовыйЭлемент.Заголовок = Метаданные.Справочники.Номенклатура.Реквизиты.<?""Имя реквизита"">.Синоним;"}
},
{0,
{"Добавить таблицу формы",0,0,"","<?""Имя таблицы""> = Элементы.Добавить(""<?""Имя таблицы"">"", Тип(""ТаблицаФормы""), _ГруппаРодитель_);
//<?""Имя таблицы"">.Заголовок = Метаданные.БизнесПроцессы.Исполнение.ТабличныеЧасти.ФактическиеЗатратыВремени.Синоним;
<?""Имя таблицы"">.ПутьКДанным = ""Объект._ИмяТабличнойЧасти_"";"}
},
{0,
{"Добавить поле ввода в таблицу формы",0,0,"","_ИмяРеквизита_ = Элементы.Добавить(""_ИмяРеквизита_"", Тип(""ПолеФормы""), _ГруппаРодитель_);
_ИмяРеквизита_.Вид = ВидПоляФормы.ПолеВвода;
//_ИмяРеквизита_.Заголовок = Метаданные.БизнесПроцессы.Исполнение.ТабличныеЧасти.ФактическиеЗатратыВремени.Реквизиты.Комментарий.Синоним;
_ИмяРеквизита_.ПутьКДанным = ""Объект._ИмяТабличнойЧасти_._ИмяРеквизита_"";
//_ИмяРеквизита_.КнопкаВыбора = Истина;
//_ИмяРеквизита_.УстановитьДействие(""НачалоВыбора"", ""_ИмяМетодаКоторыйБудетВызванПриОбработкеСобытияНачалоВыбора_"");"}
},
{0,
{"Добавить группу формы",0,0,"","НоваяГруппа = Элементы.Добавить(<?>_ИмяГруппы_, Тип(""ГруппаФормы""), _ГруппаРодитель_);
НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
НоваяГруппа.ОтображатьЗаголовок = Ложь;"}
},
{0,
{"Добавить страницы\страницу",0,0,"","<?""Группа-страницы""> = Элементы.Добавить(""<?""Группа-страницы"">"", Тип(""ГруппаФормы""));
<?""Группа-страницы"">.Вид = ВидГруппыФормы.Страницы;

<?""Имя страницы""> = Элементы.Добавить(""<?""Имя страницы"">"", Тип(""ГруппаФормы""), <?""Группа-страницы"">);
<?""Имя страницы"">.Вид = ВидГруппыФормы.Страница;
<?""Имя страницы"">.Заголовок = <?>;"}
},
{0,
{"Добавить группы колонок к таблице",0,0,"","МассивГрупп = Новый Массив;
МассивГрупп.Добавить(Новый Структура(""УчебныйГод, Курс""));
МассивГрупп.Добавить(Новый Структура(""ДатаНачалаГода, ДатаОкончанияГода""));
МассивГрупп.Добавить(Новый Структура(""СтоимостьГода, ПервоначальнаяСтоимостьГода""));
МассивГрупп.Добавить(Новый Структура(""Соглашение, ДопСоглашение""));

Счетчик = 0;
Для каждого _1 Из МассивГрупп Цикл
	
	Счетчик = Счетчик + 1;
	НоваяГруппаКолонок = Элементы.Добавить(_ИмяГруппыКолонок_ + Счетчик, Тип(""ГруппаФормы""), _ТаблицаФормы_);
	НоваяГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
	Для каждого КлючЗначение Из _1 Цикл
		
		ИмяЭлемента = _ПолучитьИмяЭлемента_;
		Элементы.Переместить(Элементы.Найти(ИмяЭлемента), НоваяГруппаКолонок);
		
	КонецЦикла;
	
КонецЦикла;"}
}
},
{1,
{"Условное оформление",1,0,"",""},
{0,
{"Добавить элемент условного оформления",0,0,"","НовыйЭлемент = УсловноеОформление.Элементы.Добавить();

ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));

ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
ЭлементОтбора.Использование = Истина;
ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""Объект.УчебныеГода.Соглашение"");
ЭлементОтбора.ПравоеЗначение = Истина;

НовыйЭлемент.Оформление.Элементы.Найти(""Доступность"").Использование = Истина;
НовыйЭлемент.Оформление.Элементы.Найти(""Доступность"").Значение = Истина;

ПолеОформления = НовыйЭлемент.Поля.Элементы.Добавить();
ПолеОформления.Использование = Истина;
ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(""УчебныеГодаДопСоглашение_бит""); // Имя элемента формы Элементы[Имя]"}
}
},
{1,
{"Реквизиты",1,0,"",""},
{0,
{"Добавить реквизит",0,0,"","МассивДобавляемыхРеквизитов = Новый Массив;
МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(_ИмяРеквизитаФормы_,
Новый ОписаниеТипов(_ТипРеквизитаФормы_),
_ПутьКДанным_,
_Синоним_));
ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);"}
}
},
{1,
{"Команды",1,0,"",""},
{0,
{"Добавить команду",0,0,"","КомандаФормы = ЭтаФорма.Команды.Добавить(""ЗаполнитьСтудентами_бит"");
КомандаФормы.Действие = ""ЗаполнитьСтудентами_бит"";
КомандаФормы.Заголовок = ""Заполнить студентами"";

КнопкаЗаполнить = Элементы.Добавить(""Заполнить_бит"",Тип(""КнопкаФормы""), Элементы.Найти(""ТаблицаСтудентовГруппаЗаполнить""));
КнопкаЗаполнить.ИмяКоманды = ""ЗаполнитьСтудентами_бит"";"}
}
},
{1,
{"Дерево значений",1,0,"",""},
{0,
{"Установка текущей строки в дереве значений",0,0,"","Для Каждого ТекущаяСтрока Из ДеревоЗначений.ПолучитьЭлементы() Цикл
	
	Если ТекущаяСтрока._ИмяКолонкиДляПоиска_ = _ЗначениеДляПоиска_ Тогда
		ЭтаФорма.Элементы.ДеревоЗначений.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		Прервать;
	КонецЕсли;
	
КонецЦикла;
"}
}
},
{1,
{"Методы",1,0,"",""},
{0,
{"ПутьКФайлуНачалоВыбора",0,0,"","&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = """";
	Фильтр = НСтр(""ru = 'Текст'; en = 'Text'"")
	+ ""(*.txt)|*.txt"";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите файл"";
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения(""ДиалогОткрытияФайлаЗавершение"", ЭтотОбъект));
КонецПроцедуры

Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		Объект.ПутьКФайлу = ВыбранныеФайлы[0];
		
	КонецЕсли;
	
КонецПроцедуры // ДиалогОткрытияФайлаЗавершение()"}
}
},
{0,
{"Обновление отображения измененного реквизита",0,0,"","ОтобразитьИзменениеДанных(Объект.Номенклатура, ВидИзмененияДанных.Изменение)"}
},
{0,
{"Открытие формы незаписанного документа",0,0,"","&НаКлиенте
Процедура Команда(Команда)
	
	Форма = ПолучитьФорму(""Документ.НашДокумент.ФормаОбъекта"");
	ДанныеФормы = Форма.Объект; // Получаем объект формы в переменную
	ЗаполнитьДокументНаСервере(ДанныеФормы); // Заполняем документ на сервере
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект); // копируем наш объект в объект формы и далее открываем ее
	Форма.Открыть();
	
КонецПроцедуры


// Можно использовать безконтекстный вызов, оптимизируем передачу данных

&НаСервереБезКонтекста

Функция ЗаполнитьДокументНаСервере(ДанныеФормы);
	
	Док = ДанныеФормыВЗначение(ДанныеФормы, Тип(""ДокументОбъект.НашДокумент"")); // Получаем объект из данных формы ИЛИ
	
	Док = Документы.НашДокумент.СоздатьДокумент();
	
	// Заполняем реквизиты объекта или другие действия ********
	
	ЗначениеВДанныеФормы(Док,ДанныеФормы); // Кладем обратно в объект формы уже созданный документ
	
КонецФункции"}
},
{0,
{"Перечитать() объект у формы-владельца",0,0,"","ЭтаФорма.ВладелецФормы.Прочитать();"}
},
{0,
{"Кнопка перезапуска внешней обработки",0,0,"","#Область dbКнопкаПерезапускаВнешнейОбработки
// вызов dbДобавитьКнопкуПерезапуска() добавить в обработчик ПриСозданииНаСервере()
&НаСервере
Процедура dbДобавитьКнопкуПерезапуска()
	НоваяКоманда = ЭтаФорма.Команды.Добавить(""dbПерезапуск"");
	НоваяКоманда.Действие= ""dbПерезапустить"";
	НовыйЭлемент = Элементы.Добавить(""dbПерезапустить"", Тип(""КнопкаФормы""),Элементы.ФормаКоманднаяПанель);
	НовыйЭлемент.ИмяКоманды = ""dbПерезапуск"";
	НовыйЭлемент.Заголовок = ""Перезапустить [""+ТекущаяУниверсальнаяДата()+""]"";
КонецПроцедуры

&НаКлиенте
Процедура dbПерезапустить(Команда)
	
	СтруктураПереоткрыть = Новый Структура();
	dbПереоткрытьНаСервере(""Поместить"", СтруктураПереоткрыть);
	Если СтруктураПереоткрыть.ФункцияПомещения = ""НачатьПомещениеФайла"" Тогда
		НачатьПомещениеФайла(,,СтруктураПереоткрыть.ИспользуемоеИмяФайла,Ложь,);
	Иначе
		ПоместитьФайл(,СтруктураПереоткрыть.ИспользуемоеИмяФайла,,Ложь,);
	КонецЕсли;
	dbПереоткрытьНаСервере(""Создать"", СтруктураПереоткрыть);
	ЭтаФорма.Закрыть();
	ОткрытьФорму(СтруктураПереоткрыть.ПолныйПутьИмениФормы);
	
КонецПроцедуры

&НаСервере
Процедура dbПереоткрытьНаСервере(Режим, СтруктураПереоткрыть)
	
	Если Режим = ""Поместить"" Тогда
		СтруктураПереоткрыть.Очистить();
		СтруктураПереоткрыть.Вставить(""ФункцияПомещения"", ?(СокрЛП(Метаданные.РежимИспользованияМодальности) = ""НеИспользовать"", ""НачатьПомещениеФайла"", ""ПоместитьФайл""));
		СтруктураПереоткрыть.Вставить(""ИспользуемоеИмяФайла"", СокрЛП(РеквизитформыВЗначение(""Объект"").ИспользуемоеИмяФайла));
		СтруктураПереоткрыть.Вставить(""ПолныйПутьИмениФормы"", СокрЛП(ЭтаФорма.ИмяФормы));
	ИначеЕсли Режим = ""Создать"" Тогда
		ВнешниеОбработки.Создать(СтруктураПереоткрыть.ИспользуемоеИмяФайла, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти"}
},
{1,
{"Тестирование",1,0,"",""},
{0,
{"Добавить группу тестирование на форму",0,0,"","#Область dbТестирование

Процедура dbДобавитьПанельТестирование()

	dbТестирование = Элементы.Добавить(""dbТестирование"", Тип(""ГруппаФормы""));
	dbТестирование.Заголовок = ""Тестирование"";
	dbДобавитьКнопкуПерезапуска(dbТестирование);
	
	НоваяКоманда = ЭтаФорма.Команды.Добавить(""dbОткрытьРегистрКоэффициентов"");
	НоваяКоманда.Действие= ""dbОткрытьРегистрКоэффициентов"";
	НовыйЭлемент = Элементы.Добавить(""dbОткрытьРегистрКоэффициентов"", Тип(""КнопкаФормы""),dbТестирование);
	НовыйЭлемент.ИмяКоманды = ""dbОткрытьРегистрКоэффициентов"";

КонецПроцедуры

#Область dbКнопкаПерезапускаВнешнейОбработки
// вызов dbДобавитьКнопкуПерезапуска() добавить в обработчик ПриСозданииНаСервере()
&НаСервере
Процедура dbДобавитьКнопкуПерезапуска(Группа)
	НоваяКоманда = ЭтаФорма.Команды.Добавить(""dbПерезапуск"");
	НоваяКоманда.Действие= ""dbПерезапустить"";
	НовыйЭлемент = Элементы.Добавить(""dbПерезапустить"", Тип(""КнопкаФормы""),Группа);
	НовыйЭлемент.ИмяКоманды = ""dbПерезапуск"";
	НовыйЭлемент.Заголовок = ""Перезапустить [""+ТекущаяУниверсальнаяДата()+""]"";
КонецПроцедуры

&НаКлиенте
Процедура dbПерезапустить(Команда)
	
	СтруктураПереоткрыть = Новый Структура();
	dbПереоткрытьНаСервере(""Поместить"", СтруктураПереоткрыть);
	Если СтруктураПереоткрыть.ФункцияПомещения = ""НачатьПомещениеФайла"" Тогда
		НачатьПомещениеФайла(,,СтруктураПереоткрыть.ИспользуемоеИмяФайла,Ложь,);
	Иначе
		ПоместитьФайл(,СтруктураПереоткрыть.ИспользуемоеИмяФайла,,Ложь,);
	КонецЕсли;
	dbПереоткрытьНаСервере(""Создать"", СтруктураПереоткрыть);
	ЭтаФорма.Закрыть();
	ОткрытьФорму(СтруктураПереоткрыть.ПолныйПутьИмениФормы);
	
КонецПроцедуры

&НаСервере
Процедура dbПереоткрытьНаСервере(Режим, СтруктураПереоткрыть)
	
	Если Режим = ""Поместить"" Тогда
		СтруктураПереоткрыть.Очистить();
		СтруктураПереоткрыть.Вставить(""ФункцияПомещения"", ?(СокрЛП(Метаданные.РежимИспользованияМодальности) = ""НеИспользовать"", ""НачатьПомещениеФайла"", ""ПоместитьФайл""));
		СтруктураПереоткрыть.Вставить(""ИспользуемоеИмяФайла"", СокрЛП(РеквизитформыВЗначение(""Объект"").ИспользуемоеИмяФайла));
		СтруктураПереоткрыть.Вставить(""ПолныйПутьИмениФормы"", СокрЛП(ЭтаФорма.ИмяФормы));
	ИначеЕсли Режим = ""Создать"" Тогда
		ВнешниеОбработки.Создать(СтруктураПереоткрыть.ИспользуемоеИмяФайла, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИмяРегистраКоэффициентовНоменклатуры = ""битнн_КоэффициентыНаценкиНоменклатуры"";
	dbДобавитьПанельТестирование();
КонецПроцедуры

&НаКлиенте
Процедура dbОткрытьРегистрКоэффициентов(Команда)
	ОткрытьФорму(""РегистрСведений."" + ИмяРегистраКоэффициентовНоменклатуры + "".ФормаСписка"");
КонецПроцедуры

#КонецОбласти // dbКнопкаПерезапускаВнешнейОбработки

#КонецОбласти // dbТестирование"}
}
}
},
{18,
{"Общие",1,0,"",""},
{4,
{"Условия",1,0,"",""},
{0,
{"Если",0,0,"у","Если <?> Тогда
	
	
КонецЕсли;"}
},
{0,
{"ЕслиИначе",0,0,"у","Если <?> Тогда
	
Иначе
	
КонецЕсли;"}
},
{0,
{"ЕслиИначеЕсли",0,0,"у","Если <?> Тогда
	
ИначеЕсли  Тогда
	
Иначе
	
КонецЕсли;"}
},
{0,
{"ИначеЕсли",0,0,"у","ИначеЕсли <?> Тогда"}
}
},
{4,
{"Циклы",1,0,"",""},
{0,
{"Для",0,0,"ц","Для <?> По  Цикл
	
	
	
КонецЦикла;"}
},
{0,
{"Для Каждого",0,0,"ц","Для Каждого <?> Из  Цикл
	
	
	
КонецЦикла;"}
},
{0,
{"Пока",0,0,"ц","Пока <?> Цикл
	
	
	
КонецЦикла;"}
},
{0,
{"Обратный обход таблицы значений",0,0,"ц","Счетчик = <?""Таблица"">.Количество();
Пока Счетчик > 0 Цикл
	
	Счетчик = Счетчик - 1;
	
	ТекущаяСтрока = <?""Таблица"">[Счетчик];
	<?>
	
КонецЦикла;"}
}
},
{4,
{"Методы",1,0,"",""},
{0,
{"Процедура",0,0,"м","Процедура <?""Процедура"">()
	
	<?>
	
КонецПроцедуры // <?""Процедура"">()"}
},
{0,
{"Процедура экспортная",0,0,"м","Процедура <?""Процедура"">() Экспорт
	
	<?>
	
КонецПроцедуры // <?""Процедура"">()"}
},
{0,
{"Функция",0,0,"м","Функция <?""Функция"">()
	
	<?>
	Возврат Неопределено;
	
КонецФункции // <?""Функция"">()"}
},
{0,
{"Функция экспортная",0,0,"м","Функция <?""Функция"">() Экспорт
	
	<?>
	Возврат Неопределено;
	
КонецФункции // <?""Функция"">()"}
}
},
{0,
{"Комментарий",0,0,".ко","//<?"""", ДатаВремя, ""ДФ=yyyy.dd.MM""> Трушников В.С. <?>"}
},
{0,
{"ЗаполнитьЗначенияСвойств()",0,0,"ззс","ЗаполнитьЗначенияСвойств(<?>);"}
},
{0,
{"Квадратные скобки",0,0,".х","[<?>]"}
},
{0,
{"Текущая дата",0,0,".те","""<?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"""}
},
{0,
{"ОписаниеТипов",0,0,"Опи[саниеТипов]","Новый ОписаниеТипов(""<?""Тип"", ВыборТипа>"")"}
},
{0,
{"ЗначениеЗаполнено()",0,0,"зз","ЗначениеЗаполнено(<?>)"}
},
{0,
{"Область",0,0,"обл[асть]","#Область <?>
#КонецОбласти"}
},
{1,
{"Сокращения",1,0,"",""},
{0,
{"ПланВидовХарактеристик",0,0,"пвх","ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>"}
}
},
{0,
{"Запрос",0,0,"За[прос]","Запрос = Новый Запрос;
Запрос.УстановитьПараметр("""", """");
Запрос.Текст = ""<?>"";"}
},
{0,
{"ТабличнаяЧасть.НайтиСтроки",0,0,"","СтруктураОтбор = Новый Структура(""<?>"");
ЗаполнитьЗначенияСвойств(СтруктураОтбор, _Выборка_);
НайденныеСтроки = ДокументОбъект.НайтиСтроки(СтруктураОтбор);
Для Каждого ТекущаяСтрокаТЗ Из НайденныеСтроки Цикл
	
КонецЦикла;"}
},
{0,
{"ОписаниеОповещения",0,0,"оо","Новый ОписаниеОповещения<?>"}
},
{0,
{"Структура модуля управляемой формы",0,0,"","#Область ПеременныеМодуля



#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти

#Область ОбработчикиСобытийФормы_КомандыФормы



#КонецОбласти

#Область Инициализация



#КонецОбласти

"}
},
{0,
{"ВыборкаДетальныеЗаписи с проверкой результата",0,0,"Вы[боркаДетальныеЗаписи]","РезультатЗапроса = Запрос.Выполнить();
Если РезультатЗапроса.Пустой() Тогда
	Возврат
КонецЕсли;

ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
ВыборкаДетальныеЗаписи.Следующий();
<?>"}
},
{1,
{"Строки",1,0,"",""},
{0,
{"Удалить недопустимые символы",0,0,"","Строка = """";
УдаляемыеСимволы = "" .,()"";
Для Счетчик=1 По СтрДлина(УдаляемыеСимволы) Цикл
	
	Символ = Сред(УдаляемыеСимволы,Счетчик,1);
	ЮрФизЛицо = СтрЗаменить(Строка, Символ, """");
	
КонецЦикла;"}
}
},
{0,
{"Массив",0,0,"ма[ссив]","Массив = Новый Массив;
<?>"}
}
},
{2,
{"Алгоритмы",1,0,"",""},
{1,
{"ЗУП",1,0,"",""},
{0,
{"Пол физлица из строки",0,0,"","Функция ПолучитьПолИзСтроки(Знач Пол)
	Пол = ВРег(СокрЛП(Пол));
	Пол = Лев(Пол,1);
	Если Пол = ""M"" ИЛИ Пол = ""М"" Тогда
		Возврат Перечисления.ПолФизическогоЛица.Мужской;
	ИначеЕсли Пол = ""Ж"" ИЛИ Пол = ""F"" Тогда
		Возврат Перечисления.ПолФизическогоЛица.Женский;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции"}
}
},
{2,
{"Общие",1,0,"",""},
{0,
{"Дата из строки",0,0,"","Функция ПолучитьДатуИзСтроки(Знач Строка)
	Строка = СокрЛП(Строка);
	Строка = СтрЗаменить(Строка, Символы.НПП,"""");
	Строка = СтрЗаменить(Строка, ""-"",""."");
	Строка = СтрЗаменить(Строка, ""/"",""."");
	Строка = СтрЗаменить(Строка, ""\"",""."");
	Год = ""0001"";
	Месяц = ""01"";
	День = ""01"";
	Если СтрНайти(Строка, ""."") = 3 Тогда
		//14.11.1998
		День = Сред(Строка,1,2);
		Месяц = Сред(Строка,4,2);
		Год = Сред(Строка, 7, 4);
	ИначеЕсли СтрНайти(Строка, ""."") = 5 Тогда
		//1998.11.14
		День = Сред(Строка,9,2);
		Месяц = Сред(Строка,6,2);
		Год = Сред(Строка, 1, 4);
	Иначе
		Попытка
			Возврат Дата(Лев(Строка,8));
		Исключение
			Возврат Неопределено
		КонецПопытки;
	КонецЕсли;
	Попытка
		Возврат Дата(Год + Месяц + День);
	Исключение
		Возврат Неопределено
	КонецПопытки;
КонецФункции"}
},
{0,
{"Нечетное число",0,0,"","Функция ЭтоНечетноеЧисло(Число)

	Возврат Цел(Число/2) <> Число/2;

КонецФункции // ЭтоНечетноеЧисло()"}
}
}
},
{2,
{"БСП",1,0,"",""},
{0,
{"СведенияОВнешнейОбработке()",0,0,"","Функция СведенияОВнешнейОбработке() Экспорт
	
	Мета = ЭтотОбъект.Метаданные();
	Имя = Мета.Имя;
	Наименование = Мета.Синоним;
	Информация = Мета.Комментарий;
	
	РегистрационныеДанные = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	
	РегистрационныеДанные.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
	РегистрационныеДанные.БезопасныйРежим = Ложь;
	РегистрационныеДанные.Версия = ""<?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">"";
	РегистрационныеДанные.Информация = Информация;
	РегистрационныеДанные.Наименование = Наименование;
	
	//РегистрационныеДанные.Назначение.Добавить(""Справочник.Сотрудники"");
	//РегистрационныеДанные.Назначение.Добавить(""Документ.ПриемНаРаботу"");
	//РегистрационныеДанные.Назначение.Добавить(""Документ.РазовоеНачисление"");
	
	//НоваяКоманда = РегистрационныеДанные.Команды.Добавить();
	//НоваяКоманда.Представление = Наименование;
	//НоваяКоманда.Идентификатор = Имя;
	//НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовКлиентскогоМетода();
	
	Возврат РегистрационныеДанные;
КонецФункции"}
},
{1,
{"Отладка запросов",1,0,"",""},
{0,
{"общий модуль для отладки",0,0,"","// < vtrushnikov@1cbit.ru
// пример вызова 
// КонсольЗапросов.ВыгрузитьТекстЗапросаВФайл(Запрос, ""C:\Users\1cbit.trushnikov\Documents\КонсольЗапросов\Запросы\1"");
Функция ВыгрузитьТекстЗапросаВФайл(Запрос, Путь) Экспорт
	Если Не ТипЗнч(Запрос) = Тип(""Запрос"") Тогда
		Возврат ""Неверный параметр 1: ожидается Тип(""""Запрос"""")"";
	КонецЕсли;
	ЗаписьТекста = Новый ЗаписьТекста;
	Попытка
		ЗаписьТекста.Открыть(Путь);
		ЗаписьТекста.Записать(СокрЛП(Запрос.Текст));
		ЗаписьТекста.Закрыть();
		Возврат Путь;
	Исключение
		Возврат ОписаниеОшибки()
	КонецПопытки;
КонецФункции

// пример вызова 
// КонсольЗапросов.ВыгрузитьМенеджерВременныхТаблицВФайл(МенеджерВременныхТаблиц, ""C:\Users\1cbit.trushnikov\Documents\Конфигурация\ВыгрузкиМВТ\РассчитатьЗачетАвансовПолученных.xml"");
Функция ВыгрузитьМенеджерВременныхТаблицВФайл(ЗапросИлиМВТ, Путь) Экспорт
	МВТ = Неопределено;
	Если ТипЗнч(ЗапросИлиМВТ) = Тип(""МенеджерВременныхТаблиц"") Тогда
		МВТ = ЗапросИлиМВТ;
	ИначеЕсли ТипЗнч(ЗапросИлиМВТ) = Тип(""Запрос"") Тогда
		МВТ = ЗапросИлиМВТ.МенеджерВременныхТаблиц;
	Иначе
		Возврат ""Неверный параметр 1: ожидается Тип(""""МенеджерВременныхТаблиц"""") или Тип(""""Запрос"""")"";
	КонецЕсли;
	Структура = Новый Структура;
	Для Каждого ВременнаяТаблица Из МВТ.Таблицы Цикл
		ИмяВременнойТаблицы = ВременнаяТаблица.ПолноеИмя;
		Структура.Вставить(ИмяВременнойТаблицы, ВременнаяТаблица.ПолучитьДанные().Выгрузить());
	КонецЦикла;
	ЗаписьТекста = Новый ЗаписьТекста;
	Попытка
		ЗаписьТекста.Открыть(Путь);
		ЗаписьТекста.Записать(Сериализовать(Структура));
		ЗаписьТекста.Закрыть();
		Возврат Путь;
	Исключение
		Возврат ОписаниеОшибки()
	КонецПопытки;
КонецФункции

// пример вызова 
// КонсольЗапросов.ВыгрузитьПараметрыЗапросаВФайл(Запрос, ""C:\Users\1cbit.trushnikov\Documents\КонсольЗапросов\Запросы\1\Параметры.xml"");
Функция ВыгрузитьПараметрыЗапросаВФайл(Запрос, Путь) Экспорт
	Если Не ТипЗнч(Запрос) = Тип(""Запрос"") Тогда
		Возврат ""Неверный параметр 1: ожидается Тип(""""Запрос"""")"";
	КонецЕсли;
	Структура = Новый Структура;
	Для Каждого ТекущийПараметр Из Запрос.Параметры Цикл
		Структура.Вставить(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
	КонецЦикла;
	ЗаписьТекста = Новый ЗаписьТекста;
	Попытка
		ЗаписьТекста.Открыть(Путь);
		ЗаписьТекста.Записать(Сериализовать(Структура));
		ЗаписьТекста.Закрыть();
		Возврат Путь;
	Исключение
		Возврат ОписаниеОшибки()
	КонецПопытки;
КонецФункции

Функция ВыгрузитьЗапросВФайлы(Запрос, Каталог) Экспорт
	Если ТипЗнч(Запрос) = Тип(""Запрос"") Тогда
		ВыгрузитьМенеджерВременныхТаблицВФайл(Запрос, Каталог + ""\МенеджерВременныхТаблиц.xml"");
		ВыгрузитьПараметрыЗапросаВФайл(Запрос, Каталог + ""\ПараметрыЗапроса.xml"");
		ВыгрузитьТекстЗапросаВФайл(Запрос, Каталог + ""\Запрос.txt"");
	Иначе
		Возврат ""Неверный параметр 1: ожидается Тип(""""Запрос"""")"";
	КонецЕсли;
КонецФункции

Функция Десериализовать(XMLСтруктураСериализованногоОбъекта) Экспорт
	ЧтениеXMLДанных = Новый ЧтениеXML;
	ЧтениеXMLДанных.УстановитьСтроку(XMLСтруктураСериализованногоОбъекта);
	ТЗ = СериализаторXDTO.ПрочитатьXML(ЧтениеXMLДанных);
	ЧтениеXMLДанных.Закрыть();  
	Возврат ТЗ;
КонецФункции

Функция Сериализовать(ОбъектСериализации) Экспорт
	ДеревоВОбъектеXDTO = СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации);
	МойXML = Новый ЗаписьXML;
	МойXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(МойXML, ДеревоВОбъектеXDTO);
	Возврат МойXML.Закрыть();
КонецФункции
// vtrushnikov@1cbit.ru >"}
}
}
},
{2,
{"Повторный код",1,0,"",""},
{4,
{"Функции",1,0,"",""},
{0,
{"Получить документ по основанию",0,0,"","Функция ПолучитьДокумент(Основание)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления"";
	
	Запрос.УстановитьПараметр(""ЗаказКлиента"", Основание);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		РТИУ = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		РТИУ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	Возврат РТИУ
КонецФункции"}
},
{0,
{"ТЗ в ТД",0,0,"","ТабДокумент = Новый ТабличныйДокумент;
Построитель = Новый ПостроительОтчета;
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(Параметры.ТаблицаВыгрузки);
Построитель.Вывести(ТабДокумент);
ТабДокумент.Показать(""Таблица значений"");"}
},
{2,
{"Сериализация",1,0,"",""},
{0,
{"Сериализовать",0,0,"","Функция Сериализовать(ОбъектСериализации) Экспорт
	ДеревоВОбъектеXDTO = СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации);
	МойXML = Новый ЗаписьXML;
	МойXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(МойXML, ДеревоВОбъектеXDTO);
	Возврат МойXML.Закрыть();
КонецФункции"}
},
{0,
{"Десериализовать",0,0,"","Функция Десериализовать(XMLСтруктураСериализованногоОбъекта) Экспорт
	ЧтениеXMLДанных = Новый ЧтениеXML;
	ЧтениеXMLДанных.УстановитьСтроку(XMLСтруктураСериализованногоОбъекта);
	ТЗ = СериализаторXDTO.ПрочитатьXML(ЧтениеXMLДанных);
	ЧтениеXMLДанных.Закрыть();  
	Возврат ТЗ;
КонецФункции"}
}
},
{1,
{"Excel",1,0,"",""},
{0,
{"Быстрое чтение через ТабличныйДокумент",0,0,"","ТабличныйДокумент = Новый ТабличныйДокумент;
ТабличныйДокумент.Прочитать(Файл, СпособЧтенияЗначенийТабличногоДокумента.Значение);
//ТабличныйДокумент.ВставитьОбласть(ТабличныйДокумент.Область(""R1""),ТабличныйДокумент.Область(""R1""),ТипСмещенияТабличногоДокумента.ПоВертикали);
ПЗ = Новый ПостроительЗапроса;
ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());
ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
ПЗ.ЗаполнитьНастройки();
ПЗ.Выполнить();
ТаблицаЗначений = ПЗ.Результат.Выгрузить();"}
}
}
},
{1,
{"Логи",1,0,"",""},
{0,
{"ЗаписатьВЛог",0,0,"","Процедура ЗаписатьВЛог(Текст)
	ЭтаФорма[""LogText""] = Текст;
	НоваяСтрока = ЭтаФорма[ИмяЛога + ""All""].Добавить();
	НоваяСтрока.Дата = ТекущаяДата();
	НоваяСтрока.Адрес = Действие;
	НоваяСтрока.Текст = Текст;
КонецПроцедуры // ЗаписатьВЛог()"}
}
}
},
{1,
{"СКД",1,0,"",""},
{0,
{"Получить параметр СКД по имени",0,0,"","Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	ИмяПараметра = ""ВидНСИ"";
	ЗначениеПараметра = ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если Не ЗначениеПараметра = Неопределено Тогда
		ЗначениеПараметра.Значение = Перечисления.ВидыНСИ.ContactType;
		ЗначениеПараметра.Использование = Истина;
	КонецЕсли;
КонецПроцедуры
"}
}
},
{5,
{"Запись XML",1,0,"",""},
{0,
{"Основа",0,0,"","ЗаписьXML = Новый ЗаписьXML;
ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
ЗаписьXML.ЗаписатьОбъявлениеXML();

ЗаписьXML.Закрыть();"}
},
{0,
{"Элемент",0,0,"хмлэ[лемент]","ЗаписьXML.ЗаписатьНачалоЭлемента(""<?""Имя элемента"">"");
ЗаписьXML.ЗаписатьАтрибут(""Атрибут1"", ""Атрибут1"");
ЗаписьXML.ЗаписатьАтрибут(""Атрибут2"", ""Атрибут2"");
ЗаписьXML.ЗаписатьАтрибут(""Атрибут3"", ""Атрибут3"");

ЗаписьXML.ЗаписатьКонецЭлемента();//«<?""Имя элемента"">»"}
},
{0,
{"Сериализовать",0,0,"","Функция Сериализовать(ОбъектСериализации) Экспорт
	ДеревоВОбъектеXDTO = СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации);
	МойXML = Новый ЗаписьXML;
	МойXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(МойXML, ДеревоВОбъектеXDTO);
	Возврат МойXML.Закрыть();
КонецФункции"}
},
{0,
{"Десериализовать",0,0,"","Функция Десериализовать(XMLСтруктураСериализованногоОбъекта) Экспорт
	ЧтениеXMLДанных = Новый ЧтениеXML;
	ЧтениеXMLДанных.УстановитьСтроку(XMLСтруктураСериализованногоОбъекта);
	ТЗ = СериализаторXDTO.ПрочитатьXML(ЧтениеXMLДанных);
	ЧтениеXMLДанных.Закрыть();  
	Возврат ТЗ;
КонецФункции"}
},
{0,
{"ЗаписьТекста",0,0,"","Путь = """";
Структура = Новый Структура;
ЗаписьТекста = Новый ЗаписьТекста;
Попытка
	ЗаписьТекста.Открыть(Путь);
	ЗаписьТекста.Записать(Сериализовать(Структура));
	ЗаписьТекста.Закрыть();
	Возврат Путь;
Исключение
	Возврат ОписаниеОшибки()
КонецПопытки;"}
}
},
{2,
{"Асинхронные вызовы",1,0,"",""},
{0,
{"Получение файла на клиенте",0,0,"","&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	НачатьПомещениеФайла(Новый ОписаниеОповещения(""НачатьПомещениеФайлаЗавершение"", ЭтотОбъект),,ПутьКФайлу,Ложь,УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура НачатьПомещениеФайлаЗавершение(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат Тогда
		//выполнить действия с файлом
	КонецЕсли;

КонецПроцедуры"}
},
{0,
{"Получение файлов на клиенте",0,0,"","&НаКлиенте
Процедура Команда1(Команда)
	Массив = Новый Массив;
	// ПутьКФайлу - Список значений
	Для Каждого _1 Из ПутьКФайлу Цикл
		Массив.Добавить(Новый ОписаниеПередаваемогоФайла(_1.Значение));
	КонецЦикла;
	НачатьПомещениеФайлов(Новый ОписаниеОповещения(""НачатьПомещениеФайловЗавершение"", ЭтотОбъект), Массив, Ложь, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура НачатьПомещениеФайловЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		ВызватьИсключение ""Не удалось прочитать файлы"";
	КонецЕсли;
	Для Каждого _1 Из ПомещенныеФайлы Цикл
		АдресФайлаВоВременнояХранилище = _1.Хранение;
		// по АдресФайлаВоВременнояХранилище файл можно получить на сервере
	КонецЦикла;
	
КонецПроцедуры"}
}
},
{2,
{"JSON",1,0,"",""},
{0,
{"ЗаписатьВJSON",0,0,"","Функция ЗаписатьВJSON(пЗначение)
	ЗаписьJSON = новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,пЗначение);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции"}
},
{0,
{"ПрочитатьИзJSON",0,0,"","Функция Прочитать_JSON(Текст)
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Текст);
	Возврат ПрочитатьJSON(Чтение);
КонецФункции"}
}
},
{0,
{"Параметры запуска",0,0,"","/C ЗапуститьОбновлениеИнформационнойБазы"}
}
}
}